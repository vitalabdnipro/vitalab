// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String       @id @default(cuid())
  firstName      String       @map(name: "first_name")
  lastName       String       @map(name: "last_name")
  middleName     String?      @map(name: "middle_name")
  lisId          String       @map("lis_id")
  isActive       IsActive     @default(TRUE)
  password       String?      @db.VarChar(250)
  phone          String       @unique
  email          String       @unique
  emailVerified  DateTime?    @map("email_verified")
  image          String?
  createdAt      DateTime     @default(now()) @map(name: "created_at")
  updatedAt      DateTime     @updatedAt @map(name: "updated_at")
  role           Role         @default(PARTNER)
  patients       Patient[]
  orders         Order[]
  accounts       Account[]
  sessions       Session[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Organization {
  id              String  @id @default(cuid())
  users           User[]
  subdivisionId   String  @map("subdivision_id")
  subdivisionName String  @map("subdivision_name") @db.VarChar(250)
  name            String  @db.VarChar(250)
  email           String?

  @@map("organization")
}

model Patient {
  id               String    @id @default(cuid())
  createdAt        DateTime  @default(now()) @map(name: "created_at")
  updatedAt        DateTime  @updatedAt @map(name: "updated_at")
  firstName        String    @map(name: "first_name")
  lastName         String    @map(name: "last_name")
  middleName       String    @map(name: "middle_name")
  phone            String
  email            String?
  birthday         DateTime  @db.Date
  gender           String
  lastOrder        String?
  lastOrderCreated DateTime?
  partner          User      @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId        String    @map(name: "partner_id")
  orders           Order[]

  @@map("patients")
}

model Order {
  id        String      @id @default(cuid())
  number    String      @unique
  createdAt DateTime    @default(now()) @map(name: "created_at")
  updatedAt DateTime    @updatedAt @map(name: "updated_at")
  partner   User        @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId String      @map(name: "partner_id")
  status    OrderStatus @default(NEW)
  total     Decimal?
  note      String?
  analyzes  OrderLine[]
  patient   Patient     @relation(fields: [patientId], references: [id])
  patientId String      @map(name: "patient_id")
  sentAt    DateTime?   @map(name: "sent_at")

  @@map("orders")
}

model OrderLine {
  id                    String          @id @default(cuid())
  order                 Order           @relation(fields: [orderId], references: [id])
  orderId               String          @map(name: "order_id")
  analysisId            String          @map(name: "analysis_id")
  analysisCode          String          @map(name: "analysis_code")
  analysisName          String          @map(name: "analysis_name") @db.VarChar(250)
  analysisPrice         Int             @map(name: "analysis_price")
  analysisColor         String?         @map(name: "analysis_color")
  analysisContainerName String?         @map(name: "analysis_container_name") @db.VarChar(250)
  status                OrderLineStatus @default(NEW)
  completedAt           DateTime?       @map(name: "completed_at")

  @@map("order_lines")
}

model Analysis {
  id           String   @unique
  code         String
  name         String
  price        Int
  categoryName String?  @map(name: "category_name")
  isActive     IsActive @default(TRUE)

  @@map("analysis")
}

enum Role {
  PARTNER
  ADMIN
}

enum OrderStatus {
  FAILED
  NEW
  SENT
  COMPLETED
}

enum OrderLineStatus {
  FAILED
  NEW
  SENT
  COMPLETED
}

enum IsActive {
  TRUE
  FALSE
}
