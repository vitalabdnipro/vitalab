import * as Collapsible from "@radix-ui/react-collapsible";
import Link from "next/link";
import { arrayToTree } from "performant-array-to-tree";
import React from "react";

// const menu = [
//   {
//     label: "Mій обліковий запис",
//     items: [
//       { label: "Профіль", link: "/analyzes/49" },
//       { label: "Зовнішній вигляд", link: "/analyzes/test-cat" },
//       { label: "Сервіси", link: "/analyzes/17" },
//       {
//         label: "Профілі",
//         items: [
//           { label: "Профілі", link: "/" },
//           {
//             label: "Гормональні профілі",
//             items: [
//               {
//                 label: "Пакет 'Гіперандрогенні порушення (розгорнутий)'",
//                 link: "/",
//               },
//               { label: "test2", link: "/" },
//             ],
//           },
//         ],
//       },
//     ],
//   },
// ];

const Content = (props) => {
  // console.log(props);
  const [isOpen, setIsOpen] = React.useState(false);
  // console.log("level1", props);
  return (
    <div className="my-[18px] first:mt-0">
      <Collapsible.Root open={isOpen} onOpenChange={setIsOpen}>
        <Collapsible.Trigger className="group -ml-[5px] flex items-center text-left text-sm font-semibold text-black [&>svg]:mr-2">
          {/* <svg
              fill="none"
              height="10"
              viewBox="0 0 6 10"
              width="6"
              xmlns="http://www.w3.org/2000/svg"
              className="transform duration-300 ease-in-out group-radix-state-open:rotate-90"
            >
              <path
                d="M1.4 8.56L4.67 5M1.4 1.23L4.66 4.7"
                stroke="#999"
                strokeLinecap="square"
              ></path>
            </svg> */}
          <svg
            data-testid="geist-icon"
            fill="none"
            height="20"
            shapeRendering="geometricPrecision"
            stroke="currentColor"
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="1.5"
            viewBox="0 0 24 24"
            width="20"
            // style="color: currentcolor;"
            className="transform duration-300 ease-in-out group-radix-state-open:rotate-90"
          >
            <path d="M9 18l6-6-6-6"></path>
          </svg>
          {props.label}
        </Collapsible.Trigger>
        <Collapsible.Content className="my-[18px] first:mt-0">
          <div className="mt-[18px] ml-[4px] border-l border-[#eaeaea] pl-[18px]">
            <ul>
              {props.items.map((item) => {
                // console.log("level2", item);
                return item?.children?.length > 0 ? (
                  <Content
                    key={item.data.id}
                    id={item.data.id}
                    label={item.data.name}
                    items={item.children}
                  />
                ) : (
                  <li
                    key={item.data.id}
                    className="mb-2 flex items-center text-sm font-normal text-black before:mt-2 before:mr-4 before:block before:h-1 before:w-1 before:shrink-0 before:basis-1 before:self-start before:rounded-full before:bg-[#666]"
                  >
                    <Link href={`${item.data.id}`}>{item.data.name}</Link>
                  </li>
                );
              })}

              {/* {console.log(props.items)} */}
              {/* {props.items.map((item) => {
                props?.items?.length > 0 ? (
                  <Content
                    key={props.items.id}
                    id={props.items.id}
                    label={props.items.name}
                    items={props.items.children}
                  />
                ) : (
                  // <li
                  //   key={props.items.id}
                  //   className="mb-2 flex items-center text-sm font-normal text-black" //before:mt-2 before:mr-4 before:block before:h-1 before:w-1 before:shrink-0 before:basis-1 before:self-start before:rounded-full before:bg-[#666]
                  // >
                  //   <Link href="/">{props.items.name}</Link>
                  // </li>
                  <div>test</div>
                );
              })} */}
              {/* {console.log("0", props.items.length)} */}
              {/* {props?.items?.length > 0} */}
              {/* {props.items.children.map((item) => {
                return item.link ? (
                  <li
                    key={item.label}
                    className="mb-2 flex items-center text-sm font-normal text-black" //before:mt-2 before:mr-4 before:block before:h-1 before:w-1 before:shrink-0 before:basis-1 before:self-start before:rounded-full before:bg-[#666]
                  >
                    <Link href={item.link}>{item.label}</Link>
                  </li>
                ) : (
                  <Content
                    key={props.items.id}
                    label={props.items.label}
                    items={props.items.children}
                  />
                );
              })} */}
              {/* {props.items.children.map((item) => {
                return item.link ? (
                  <li
                    key={item.label}
                    className="mb-2 flex items-center text-sm font-normal text-black" //before:mt-2 before:mr-4 before:block before:h-1 before:w-1 before:shrink-0 before:basis-1 before:self-start before:rounded-full before:bg-[#666]
                  >
                    <Link href={item.link}>{item.label}</Link>
                  </li>
                ) : (
                  <Content
                    key={props.items.id}
                    label={props.items.label}
                    items={props.items.children}
                  />
                );
              })} */}
            </ul>
          </div>
        </Collapsible.Content>
      </Collapsible.Root>
    </div>
  );
};

const AnalyzesSidebar = (props) => {
  // const { data: categories } = props;
  const tree = arrayToTree(props.data, {
    id: "code",
  });

  // console.log("sidebar", tree);
  return (
    <aside className="flex flex-col">
      <div className="hidden">search</div>
      {/* content */}
      <div className="px-4">
        {/* level 1 */}
        <div className=""></div>
        {/* sidebar analyzes */}
        <div>
          <h4 className="mb-5 text-lg font-semibold text-gray-900">Анализы</h4>
          <div className="">
            {tree.map((node) => {
              return node?.children?.length > 0 ? (
                <Content
                  key={node.data.id}
                  id={node.data.id}
                  label={node.data.name}
                  items={node.children}
                />
              ) : (
                <li
                  key={node.data.id}
                  className="mb-2 flex items-center text-sm font-normal text-black before:mt-2 before:mr-4 before:block before:h-1 before:w-1 before:shrink-0 before:basis-1 before:self-start before:rounded-full before:bg-[#666]"
                >
                  <Link href={node.data.id.toString()}>{node.data.name}</Link>
                </li>
              );
            })}
          </div>
        </div>
      </div>
    </aside>
  );
};

export default AnalyzesSidebar;
