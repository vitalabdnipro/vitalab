import { getSession } from "next-auth/react";
import prisma from "../../../lib/prisma";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import createReport from "../../../lib/create-report";

export default async function handler(req, res) {
  const session = await getSession({ req });
  dayjs.extend(utc);

  //   const org = await prisma.user.findUnique({
  //     where: {
  //       id: session.user.id,
  //     },
  //     select: {
  //       organizationId: true,
  //     },
  //   });
  //   //TODO bring back checking by sessions
  //   // console.log(req.query.period);
  //   if (req.method === "GET") {

  const analyzes = await prisma.OrderLine.findMany({
    where: {
      status: "SENT",
      order: {
        sentAt: {
          gte: dayjs().subtract(1, "month").toDate(),
        },
      },
    },
    include: {
      order: {
        select: {
          number: true,
          _count: {
            select: { analyzes: true },
          },
        },
      },
    },
  });

  const x = analyzes.map((item) => ({
    order: item.order.number,
    count: item.order._count.analyzes,
  }));

  const arr = [...new Map(x.map((item) => [item["order"], item])).values()];
  console.log(arr);

  if (analyzes) {
    try {
      const promises = await Promise.all(
        analyzes.map((analysis) =>
          fetch("http://10.8.0.1/results/get_by_test_id", {
            method: "POST",
            headers: {
              //   "Access-Control-Allow-Origin": "*",
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              referral_data: {
                document_data: { doc_num: analysis.order.number },
                test: {
                  ext_id: analysis.analysisId,
                  id: analysis.analysisId,
                  code: analysis.analysisCode,
                  base64: true,
                },
              },
            }),
          })
        )
      );

      const analyzesArray = await Promise.all(
        promises.map((analysis) => analysis.json())
      );

      // console.log("analyzesArray", analyzesArray);
      // const analyzesFilteredArray = analyzesArray.filter((a) => {
      //   if (a.status === "ERR") return false;

      //   return a.data.test_results_status === "READY";
      // });

      const analyzesFilteredArray = analyzesArray.filter((a) => {
        if (a.status === "ERR") return false;

        return a.data.test_results_status === "READY";
      });

      // analyzesFilteredArray.forEach((x) => console.log(x.data));
      console.log(`${analyzesFilteredArray}`);

      // const updateAnalysisStatus = async (id) => {
      //   await prisma.$transaction(async (prisma) => {
      //     const status = await prisma.order.update({
      //       where: {
      //         number: test.data.document_data.doc_num,
      //       },
      //       data: {
      //         analyzes: {
      //           updateMany: {
      //             where: {
      //               id: test.data.test_results[0].payload,
      //             },
      //             data: {
      //               status: "COMPLETED",
      //               completedAt: dayjs(test.data.date_ready).toDate(),
      //             },
      //           },
      //         },
      //       },
      //       include: {
      //         analyzes: { where: { status: "COMPLETED" } },
      //         _count: {
      //           select: { analyzes: true },
      //         },
      //       },
      //     });
      //   });
      // };

      const prom = await Promise.all(
        analyzesFilteredArray.map(async (test, index) => {
          console.log(`${index}`, test.data.document_data.doc_num);
          const res = await prisma.order.update({
            where: {
              number: test.data.document_data.doc_num,
            },
            data: {
              analyzes: {
                updateMany: {
                  where: {
                    id: test.data.test_results[0].payload,
                  },
                  data: {
                    status: "COMPLETED",
                    completedAt: dayjs(test.data.date_ready).toDate(),
                  },
                },
              },
            },
            include: {
              analyzes: { where: { status: "COMPLETED" } },
              _count: {
                select: { analyzes: true },
              },
            },
          });

          // console.log(res);

          createReport(
            test.data.form_original[0].file_content,
            test.data.test_results[0].payload
          );

          // let buff = Buffer.from(
          //   test.data.form_original[0].file_content,
          //   "base64"
          // );
          // fs.writeFileSync(
          //   `./r/${test.data.test_results[0].payload}.pdf`,
          //   buff
          // );

          return res;
        })
      );

      console.log("prom", prom);

      // prom.forEach((item, index) => {
      //   if (item._count.analyzes == prom[index].analyzes.length) {
      //     // console.log(`done ${index} - ${prom[index].id}`);
      //   }
      // });

      var map = prom.reduce(
        (cnt, cur) => ((cnt[cur.number] = cnt[cur.number] + 1 || 1), cnt),
        {}
      );

      console.log(map);
      // const completedList = prom.map((item, index) => {
      //   console.log("index", prom[index]);
      //   console.log(`${item._count.analyzes} - ${prom[index].analyzes.length}`);

      //   return item._count.analyzes == prom[index].analyzes.length
      //     ? prom[index].number
      //     : null;
      // });

      // console.log(completedList);

      // const elements = await prisma.order.findMany({
      //   where: {
      //     OR: { id: completedList },
      //   },
      // });

      // console.log(`${elements}`);

      // const resultsArray = await Promise.all(prom.map((test) => test.json()));
      // console.log("resultsArray", resultsArray);

      // // async function dataUrlToFile(temp) {
      // //   const res = await fetch(dataUrl);
      // //   const blob = await res.blob();

      // //   return new File([blob], "text.pdf", { type: "application/pdf" });
      // // }

      // prom.forEach((result) => {
      //   let buff = Buffer.from(temp, "base64");
      //   console.log("blob",result);
      //   fs.writeFileSync(`./r/${result.data.test_results.payload}`, buff);
      // });

      // AND: [
      //   {
      //     order: {
      //       number: test.data.doc_num,
      //     },
      //   },
      // ],
      // const arr = await prisma.order.findMany({
      //   where: {
      //     number: analyzesFilteredArray,
      //   },
      //   include: {
      //     order: { select: { number: true } },
      //   },
      // });

      const update = async (order, count) => {
        return await prisma.$transaction(async (prisma) => {
          // 1. Decrement amount from the sender.
          const completed = await prisma.OrderLine.count({
            where: {
              status: "COMPLETED",
              orderId: order,
            },
          });

          return completed;
          // 2. Verify that the sender's balance didn't go below zero.
          // if (sender.balance < 0) {
          //   throw new Error(`${from} doesn't have enough to send ${amount}`);
          // }
          // // 3. Increment the recipient's balance by amount
          // const recipient = prisma.account.update({
          //   data: {
          //     balance: {
          //       increment: amount,
          //     },
          //   },
          //   where: {
          //     email: to,
          //   },
          // });
          // return recipient;
        });
      };

      const up = await update("cl51y067912802wlqjwdslr0h", 100);
      console.log(`up${up}`);

      res.status(200).json();
    } catch (e) {
      res.status(500).json(console.log(e.message));
    }
  }
  //   console.log(promises);
  //   res.status(200).json(analyzes);
}
// }
