// {
//     "referral_data": {
//         "document_data": {
//             "ext_id": null,
//             "doc_num": "555500003",
//             "descr": "test",
//             "preg_week": 0,
//             "menstrphase": 100,
//             "diagnosis_code": null,
//             "policy_num": null,
//             "is_nczy": null
//         },
//         "patient_data": {
//             "ext_id": "5553213232",
//             "full_name": "Гловацький Роман Артурович",
//             "sex": "MALE",
//             "birth_date": "1969-03-06",
//             "phone": "0931029903",
//             "email": "praktikdnepr@ukr.net",
//             "passport": null
//         },
//         "doctor_data": {
//             "ext_id": "0f8aaacbd298474c818fde7f7c9c0b7e",
//             "full_name": "Тестовый Доктор 1",
//             "phone": "+3807654321",
//             "email": "doc@test.dev"
//         },
//         "org_data": {
//             "ext_id": "0f8aaacbd298474c818fde7f7c9c0b7e",
//             "name": "Нова Лабораторія",
//             "email": "lab@test.dev"
//         },
//         "reception_subdivision": {
//             "ext_id": "e71d706041f4420081458e9192728ec1",
//             "name": "Сайт Vitalab"
//         },
//         "tests": [
//             {
//                 "ext_id": "6921b7e368054ce89453e35b818fc772",
//                 "id": "6921b7e368054ce89453e35b818fc772",
//                 "code": "396",
//                 "name": null,
//                 "payload": null,
//                 "descr": null,
//                 "is_cito": 0
//             },
//             {
//                 "ext_id": "0895f3cf5bab4b5aa3d721d826dbed9d",
//                 "id": "0895f3cf5bab4b5aa3d721d826dbed9d",
//                 "code": "854",
//                 "name": null,
//                 "payload": null,
//                 "descr": null,
//                 "is_cito": 0
//             }
//         ]
//     }
// }

import prisma from "../../../../lib/prisma";

const orderAssembly = async (id) => {
  const n = String(id);
  const order = await prisma.order.findUnique({
    where: {
      number: n,
    },
    include: {
      patient: true,
      partner: {
        include: {
          organization: true,
        },
      },
      analyzes: true,
    },
  });

  const { patient, partner, analyzes } = order;

  const tests = await analyzes.map((item) => ({
    ext_id: item.analysisId,
    id: item.analysisId,
    code: item.analysisCode,
    name: null,
    payload: null,
    descr: null,
    is_cito: 0,
  }));

  const getGender = (gender) => {
    switch (gender) {
      case "Чоловік":
        return "MALE";
      case "Жінка":
        return "FEMALE";
      default:
        return "OTHER";
    }
  };

  return {
    referral_data: {
      document_data: {
        ext_id: null,
        doc_num: order.number,
        descr: order.note,
        preg_week: null,
        menstrphase: null,
        diagnosis_code: null,
        policy_num: null,
        is_nczy: null,
      },
      patient_data: {
        ext_id: patient.id,
        full_name: `${patient.lastName} ${patient.firstName} ${patient.middleName}`,
        sex: getGender(patient.gender),
        birth_date: patient.birthday,
        phone: patient.phone,
        email: patient.email,
        passport: null,
      },
      doctor_data: {
        ext_id: null,
        full_name: null,
        phone: null,
        email: null,
      },
      org_data: {
        ext_id: partner.lisId,
        name: partner.organization.name ? partner.organization.name : null,
        email: partner.organization.email,
      },
      reception_subdivision: {
        ext_id: partner.organization.subdivisionId,
        name: partner.organization.subdivisionName,
      },
      tests: tests,
    },
  };
};

const getLatestOrderNumber = async () => {
  try {
    const n = await prisma.order.findMany({
      select: {
        number: true,
      },
      orderBy: {
        createdAt: "desc",
      },
      take: 1,
    });

    //TODO recreate
    return n.length === 0 ? "55500000101" : Number(n[0].number) + 1;
  } catch (error) {}
};

export default async function handler(req, res) {
  let { number } = req.query;

  const order = await orderAssembly(number);

  try {
    const data = await fetch("http://10.8.0.1/referral/create_referral", {
      method: "POST",
      headers: {
        //   "Access-Control-Allow-Origin": "*",
        "Content-Type": "application/json",
      },
      body: JSON.stringify(order),
    }).then((res) => res.json());

    const test = await data;
    
    if (test.status === "OK") {
      const updateStatus = await prisma.order.update({
        where: {
          number: test.data.doc_num,
        },
        data: {
          status: "SENT",
        },
      });
    }

    res.status(200).json(data);
  } catch (e) {
    res.status(500).json(console.log(e.message));
  }
}
