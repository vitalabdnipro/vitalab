import useSWR from "swr";
import { arrayToTree } from "performant-array-to-tree";
import fetcher from "../lib/fetcher";
import clsx from "clsx";
import TestInfoModal from "../components/molecules/test-info-modal";

const PriceList = () => {
  const { error: catsError, data: cats } = useSWR("/api/categories", fetcher);
  const { error: itemsError, data: items } = useSWR("/api/analyzes", fetcher);
  const { data: user, error: userError } = useSWR(`/api/users/`, fetcher);

  if (catsError || itemsError || userError) return <div>failed to load</div>;
  if (!items || !cats || !user) return <div>loading...</div>;
  console.log(items);

  const m = cats.data.items.map((cat, index) => {
    const item = items.data.items.filter(
      (i) => cat.id === i.category_id && i.is_active === 1
    );
    return { ...cat, items: { item } };
  });

  const tree = arrayToTree(m, { parentId: "parentid" }).sort(
    (a, b) => a.data.order - b.data.order
  );

  const Element = ({ element, name }) => {
    let nameId = "";
    console.log(nameId);
    return (
      <div className="">
        {element.children
          .sort((a, b) => a.data.order - b.data.order)
          .map((e, index) => {
            nameId = name;
            nameId = nameId ? `${nameId}  ➞  ${e.data.name}` : e.data.name;
            return (
              <div key={e.data.id} className="grid text-sm">
                <div className="pt-10 pb-4 font-semibold text-slate-900 text-base">
                  {nameId}
                </div>
                <div className="text-semibold grid min-h-[40px] grid-cols-[100px_minmax(600px,_1fr)_70px_70px_1fr] items-center border-b border-gray-100 text-xs">
                  <div className="font-semibold">Код</div>
                  <div className="font-semibold">Наіменування дослідження</div>
                  <div className="font-semibold">Ціна</div>
                  <div className="font-semibold">Термін</div>
                  <div className="font-semibold">Контейнер</div>
                </div>
                <div>
                  {e.data.items.item
                    .sort((a, b) => a.code - b.code)
                    .map((item, index) => {
                      // console.log(item.description.split('•').map(item => item.trim()))
                      return (
                        // <div key={item.id} className="text-blue-500">
                        //   {item.name} ({item.code})
                        // </div>
                        <>
                          <div
                            key={item.id}
                            className="grid min-h-[30px] cursor-pointer grid-cols-[100px_minmax(600px,_1fr)_70px_70px_1fr_30px] items-center border-b border-dashed border-gray-100 py-2 text-xs font-normal leading-5 text-slate-900"
                          >
                            <div className="w-10 font-semibold">
                              {item.code}
                            </div>
                            <div className="mr-4">{item.name}</div>
                            <div>{item.price / 100}</div>
                            <div>{item.days}</div>
                            <div className="mr-4">{item.container_name}</div>
                            {/* {item.description && (
                              <TestInfoModal
                                description={item?.description}
                                name={item.name}
                              />
                            )} */}
                          </div>
                        </>
                      );
                    })}
                </div>
                {element.children.length > 0 && (
                  <Element key={e.data.id} element={e} name={nameId} />
                )}
              </div>
            );
          })}
      </div>
    );
  };

  return (
    <>
      {/* <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head> */}
      {/* 
      <style type="text/css" media="print">
        {" @page { size: portrait; } "}
      </style> */}
      <main
        className={clsx(
          "price mx-4 h-full sm:mx-8 md:mx-14 2xl:mx-auto 2xl:w-full 2xl:max-w-7xl"
        )}
      >
        <div className="border border-gray-200 p-3 px-8 print:border-none print:p-0 print:px-0 bg-white rounded-lg pb-10">
          <div className="flex justify-between mt-6 items-center print:justify-center">
            <div className="text-base print:text-2xl font-semibold print:text-center">
              <span className="font-normal">Прайс лист</span>{" "}
              {user.organization.name}
            </div>
            <div className="print:hidden">
              <button
                className="text-sm bg-blue-600 border-0 h-7 flex items-center py-1 px-2 rounded-md duration-[240ms] transition-all ease-[cubic-bezier(.25,.1,.25,1)] text-white shadow-stripe fill-white outline-none focus:ring focus:ring-[rgba(58,151,212,0.36)]"
                onClick={() => window.print()}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5 mr-1"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  strokeWidth={2}
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"
                  />
                </svg>
                Роздрукувати прайс лист
              </button>
            </div>
          </div>
          {tree.map((t) => {
            return (
              <div key={t.data.name}>
                {t.data.items.item.length > 0 && (
                  <div className="grid text-base">
                    <div className="pt-10 pb-2 font-semibold">
                      {t.data.name}
                    </div>
                    <div className="text-semibold grid min-h-[40px] grid-cols-[100px_minmax(600px,_1fr)_70px_70px_1fr] items-center border-b border-gray-100 text-xs">
                      <div className="font-semibold">Код</div>
                      <div className="font-semibold">
                        Наіменування дослідження
                      </div>
                      <div className="font-semibold">Ціна</div>
                      <div className="font-semibold">Термін</div>
                      <div className="font-semibold">Контейнер</div>
                    </div>
                    {t.data.items.item
                      .sort((a, b) => a.code - b.code)
                      .map((item) => {
                        return (
                          <>
                            <div
                              key={item.id}
                              className="grid min-h-[30px] cursor-pointer grid-cols-[100px_minmax(600px,_1fr)_70px_70px_1fr,30px] items-center border-b border-dashed border-gray-100 py-2 text-xs font-normal leading-5 text-slate-900"
                            >
                              <div className="w-10 font-semibold">
                                {item.code}
                              </div>
                              <div className="mr-4">{item.name}</div>
                              <div>{item.price / 100}</div>
                              <div>{item.days}</div>
                              <div className="mr-4">{item.container_name}</div>
                              {/* {item.description && (
                                <TestInfoModal
                                  description={item?.description}
                                  name={item.name}
                                />
                              )} */}
                            </div>
                          </>
                        );
                      })}
                  </div>
                )}
                <Element key={t.data.name} element={t} name={t.data.name} />
              </div>
            );
          })}
        </div>
      </main>
    </>
  );
};

export default PriceList;
