import prisma from "../../../lib/prisma";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import createReport from "../../../lib/create-report";
import murmurhash from "murmurhash";

export default async function handler(req, res) {
  if (req.query.apiKey !== process.env.API_ROUTE_SECRET) {
    return res.status(401).send("You are not authorized");
  }

  dayjs.extend(utc);

  const analyzes = await prisma.OrderLine.findMany({
    where: {
      status: "SENT",
      order: {
        sentAt: {
          gte: dayjs().subtract(1, "Month").toDate(),
        },
      },
    },
    include: {
      order: {
        select: {
          number: true,
          _count: {
            select: { analyzes: true },
          },
        },
      },
    },
  });

  // console.log(analyzes);
  // analyzes.forEach(async (element) => {
  //   if (element.analysisCode === "00001") {
  //     await prisma.OrderLine.update({
  //       where: {
  //         id: element.id,
  //       },
  //       data: {
  //         status: "COMPLETED",
  //       },
  //     });
  //     console.log(element.id);
  //   }
  // });

  // console.log("analyzes", analyzes);

  if (analyzes) {
    let completedAnalyzes = [];

    try {
      const chunkSize = 3;

      for (let i = 0; i < analyzes.length; i += chunkSize) {
        const chunk = analyzes.slice(i, i + chunkSize);
        const promises = await Promise.all(
          chunk.map(
            async (analysis) =>
              await fetch("http://10.8.0.1/results/get_by_test_id", {
                method: "POST",
                headers: {
                  //   "Access-Control-Allow-Origin": "*",
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  referral_data: {
                    document_data: { doc_num: analysis.order.number },
                    test: {
                      ext_id: analysis.analysisId,
                      id: analysis.analysisId,
                      code: analysis.analysisCode,
                      // base64: true,
                    },
                  },
                }),
              })
          )
        );

        const analyzesArray = await Promise.all(
          promises.map((analysis) => analysis.json())
        );

        const analyzesFilteredArray = analyzesArray.filter((a) => {
          if (a.status === "ERR") return false;

          return a.data.test_results_status === "READY";
        });

        completedAnalyzes.push(...analyzesFilteredArray);
      }
    } catch (error) {
      res.status(500).json(console.log(`error - ${e.message}`));
    }

    console.log(`analyzesArray: ${completedAnalyzes.length}`);

    // const promises = await Promise.all(
    //   analyzes.map(
    //     async (analysis) =>
    //       await fetch("http://10.8.0.1/results/get_by_test_id", {
    //         method: "POST",
    //         headers: {
    //           //   "Access-Control-Allow-Origin": "*",
    //           "Content-Type": "application/json",
    //         },
    //         body: JSON.stringify({
    //           referral_data: {
    //             document_data: { doc_num: analysis.order.number },
    //             test: {
    //               ext_id: analysis.analysisId,
    //               id: analysis.analysisId,
    //               code: analysis.analysisCode,
    //               base64: true,
    //             },
    //           },
    //         }),
    //       })
    //   )
    // );

    // const analyzesArray = await Promise.all(
    //   promises.map((analysis) => analysis.json())
    // );

    // const analyzesFilteredArray = analyzesArray.filter((a) => {
    //   if (a.status === "ERR") return false;

    //   return a.data.test_results_status === "READY";
    // });

    // console.log("analyzesFilteredArray", analyzesFilteredArray.length);

    //     const analyzesFilteredArrayCount = analyzesFilteredArray.length;
    //     let mkFile = 0;

    if (completedAnalyzes.length > 0) {
      const prom = await Promise.all(
        completedAnalyzes.map(async (test, index) => {
          const directoryHash = murmurhash.v3(
            test.data.document_data.doc_num,
            8
          );

          console.log(
            `${index} hash: ${directoryHash}`,
            test.data.document_data.doc_num
          );

          const res = await prisma.order.update({
            where: {
              number: test.data.document_data.doc_num,
            },
            // data: {
            //   analyzes: {
            //     updateMany: {
            //       where: {
            //         id: test.data.test_results[0].payload,
            //       },
            //       data: {
            //         status: "COMPLETED",
            //         completedAt: dayjs(test.data.date_ready).toDate(),
            //       },
            //     },
            //   },
            // },
            select: {
              id: true,
              analyzes: { where: { status: "COMPLETED" } },
              _count: {
                select: { analyzes: true },
              },
            },
          });

          // try {
          //   await createReport(
          //     test.data.form_original[0].file_content,
          //     test.data.test_results[0].payload,
          //     res.id,
          //     directoryHash
          //   );
          // } finally {
          //   mkFile = mkFile + 1;
          // }

          return res;
        })
      );

      // console.log("prom", prom);

      // const setOrderStatus = async (id) => {
      //   await prisma.order.update({
      //     where: {
      //       id,
      //     },
      //     data: {
      //       status: "COMPLETED",
      //     },
      //   });
      // };
    }
    //     // prom.forEach(async (item, index) => {
    //     //   if (item.analyzes.length == item._count.analyzes) {
    //     //     await setOrderStatus(item.id);
    //     //     console.log(`SET STATUS COMPLETED: ${item.id}`);
    //     //   } else {
    //     //     console.log(
    //     //       `${item.id} - ${item.analyzes.length} ~ ${item._count.analyzes}`
    //     //     );
    //     //   }
    //     // });

    //     const ordersArray = await prisma.order.findMany({
    //       where: {
    //         status: "SENT",
    //         sentAt: {
    //           gte: dayjs().subtract(1, "Month").toDate(),
    //         },
    //       },
    //       select: {
    //         id: true,
    //         analyzes: { where: { status: "COMPLETED" } },
    //         _count: {
    //           select: { analyzes: true },
    //         },
    //       },
    //     });

    //     if (ordersArray.length > 0) {
    //       ordersArray.forEach(async (order) => {
    //         if (order.analyzes.length == order._count.analyzes) {
    //           await setOrderStatus(order.id);
    //           console.log(`SET STATUS COMPLETED: ${order.id}`);
    //         }
    //         // } else {
    //         //   console.log(
    //         //     `${order.id} - ${
    //         //       order.analyzes.length == order._count.analyzes
    //         //     } [${order.analyzes.length} ${order._count.analyzes}]`
    //         //   );
    //         // }
    //       });
    //     }

    //     console.log(`Mkfile - ${mkFile} - ${analyzesFilteredArrayCount}`);
    //     // prom.forEach((item, index) => {
    //     //   if (item._count.analyzes == prom[index].analyzes.length) {
    //     //     // console.log(`done ${index} - ${prom[index].id}`);
    //     //   }
    //     // });

    //     // const completedList = prom.map((item, index) => {
    //     //   console.log("index", prom[index]);
    //     //   console.log(`${item._count.analyzes} - ${prom[index].analyzes.length}`);

    //     //   if (item._count.analyzes == prom[index].analyzes.length) {
    //     //     console.log(arr);
    //     //   }

    //     //   return item._count.analyzes == prom[index].analyzes.length;
    //     // });

    //     // console.log();

    //     // const elements = await prisma.order.findMany({
    //     //   where: {
    //     //     OR: { id: completedList },
    //     //   },
    //     // });

    //     // console.log(`${elements}`);

    //     // const resultsArray = await Promise.all(prom.map((test) => test.json()));
    //     // console.log("resultsArray", resultsArray);

    //     // // async function dataUrlToFile(temp) {
    //     // //   const res = await fetch(dataUrl);
    //     // //   const blob = await res.blob();

    //     // //   return new File([blob], "text.pdf", { type: "application/pdf" });
    //     // // }

    //     // prom.forEach((result) => {
    //     //   let buff = Buffer.from(temp, "base64");
    //     //   console.log("blob",result);
    //     //   fs.writeFileSync(`./r/${result.data.test_results.payload}`, buff);
    //     // });

    //     // AND: [
    //     //   {
    //     //     order: {
    //     //       number: test.data.doc_num,
    //     //     },
    //     //   },
    //     // ],
    //     // const arr = await prisma.order.findMany({
    //     //   where: {
    //     //     number: analyzesFilteredArray,
    //     //   },
    //     //   include: {
    //     //     order: { select: { number: true } },
    //     //   },
    //     // });

    res.status(200).json();
    // } catch (e) {
    //   res.status(500).json(console.log(`error - ${e.message}`));
    // }
  }
  //   console.log(promises);
  //   res.status(200).json(analyzes);
}
// }
